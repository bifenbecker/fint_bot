import datetime
from textwrap import dedent

from db.models import CardItem, Penalty, Player, Trade, UserCard, UserPacks


async def format_new_free_card_text(card: CardItem):
    txt = f"""
    {card.name} <b>{card.card_name}</b>
    –õ–∏–≥–∞: <b>{card.league}</b>
    –ö–æ–º–∞–Ω–¥–∞: <b>{card.team}</b>
    –†–µ–π—Ç–∏–Ω–≥: <b>{card.points}</b>
    –†–µ–¥–∫–æ—Å—Ç—å: <b>{card.rarity}</b>
    """
    return dedent(txt)


async def format_view_my_cards_text(card: CardItem):
    txt = f"""
    {card.name} <b>{card.card_name}</b>
    –õ–∏–≥–∞: <b>{card.league}</b>
    –ö–æ–º–∞–Ω–¥–∞: <b>{card.team}</b>
    –†–µ–π—Ç–∏–Ω–≥: <b>{card.points}</b>
    –†–µ–¥–∫–æ—Å—Ç—å: <b>{card.rarity}</b>
    –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: <b>{card.id}</b>
    """
    return dedent(txt)


async def format_list_my_cards_text(cards: dict):
    txts = []
    txt = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∫–∞—Ä—Ç:\n"
    num = 0
    for k, v in cards.items():
        txt += f"\n{v['card_name']} | –†–µ–π—Ç–∏–Ω–≥: {v['rating']} | {v['quant']} —à—Ç."
        num += 1
        if num == 51:
            txts.append(txt)
            num = 0
            txt = ""

    if len(txt) > 0:
        txts.append(txt)

    return txts


async def format_top_rating_text(tops, user: Player, place):
    txt = "üèÜ –°–µ–∑–æ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–∞–º\n"

    top: Player
    for num, top in enumerate(tops):
        if num == 0:
            plc = "ü•á"
        elif num == 1:
            plc = "ü•à"
        elif num == 2:
            plc = "ü•â"
        else:
            plc = f" {num + 1}."

        txt += f"\n{plc} {top.username} - {top.season_rating}"

    if place > len(tops):
        txt += f"\n\n{place}. {user.username} - {user.season_rating}"

    return txt


async def format_all_time_rating_text(tops, user: Player, place):
    txt = "üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–∞–º\n"

    top: Player
    for num, top in enumerate(tops):
        if num == 0:
            plc = "ü•á"
        elif num == 1:
            plc = "ü•à"
        elif num == 2:
            plc = "ü•â"
        else:
            plc = f" {num + 1}."

        txt += f"\n{plc} {top.username} - {top.rating}"

    if place > len(tops):
        txt += f"\n\n{place}. {user.username} - {user.rating}"

    return txt


async def format_top_penalty_text(tops, user: Player, place):
    txt = "üèÜ –°–µ–∑–æ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–µ–Ω–∞–ª—å—Ç–∏\n"

    top: Player
    for num, top in enumerate(tops):
        if num == 0:
            plc = "ü•á"
        elif num == 1:
            plc = "ü•à"
        elif num == 2:
            plc = "ü•â"
        else:
            plc = f" {num + 1}."

        txt += f"\n{plc} {top.username} - {top.season_penalty}"

    if place > len(tops):
        txt += f"\n\n{place}. {user.username} - {user.season_penalty}"

    return txt


async def format_all_time_penalty_text(tops, user: Player, place):
    txt = "üèÜ –°–µ–∑–æ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–µ–Ω–∞–ª—å—Ç–∏\n"

    top: Player
    for num, top in enumerate(tops):
        if num == 0:
            plc = "ü•á"
        elif num == 1:
            plc = "ü•à"
        elif num == 2:
            plc = "ü•â"
        else:
            plc = f" {num + 1}."

        txt += f"\n{plc} {top.username} - {top.penalty_rating}"

    if place > len(tops):
        txt += f"\n\n{place}. {user.username} - {user.penalty_rating}"

    return txt


async def format_penalty_round_result_text(penalty: Penalty, result):
    # –£—Å–ª–æ–≤–∏–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–º–µ–Ω–∞ —Å—Ç–æ—Ä–æ–Ω
    if penalty.keeper == penalty.owner:
        keeper_username = penalty.target_username
        kicker_username = penalty.owner_username
    else:
        keeper_username = penalty.owner_username
        kicker_username = penalty.target_username

    if result:
        keeper_res_txt = f"üèÜ –¢—ã –æ—Ç–±–∏–ª —É–¥–∞—Ä\n{kicker_username} –±–∏–ª –≤ —Ç–æ—Ç –∂–µ —É–≥–æ–ª\n"
        kicker_res_txt = f"‚ùå –£–≤—ã —Ç—ã –Ω–µ –∑–∞–±–∏–ª\n{keeper_username} —É–≥–∞–¥–∞–ª —Ç–≤–æ–π —É–¥–∞—Ä\n"
    else:
        keeper_res_txt = f"‚ùå –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≥–æ–ª\n{kicker_username} –±–∏–ª –≤ –¥—Ä—É–≥–æ–π —É–≥–æ–ª\n"
        kicker_res_txt = f"‚öΩÔ∏è –ì–û–õ!!!\n{keeper_username} –ø—Ä—ã–≥–Ω—É–ª –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É\n"

    owner_res_txt = penalty.owner_txt.replace("0", "‚ùå").replace("1", "‚öΩÔ∏è")
    target_res_txt = penalty.target_txt.replace("0", "‚ùå").replace("1", "‚öΩÔ∏è")

    if (penalty.round % 2) == 0:
        target_res_txt += "‚åõÔ∏è"
    else:
        owner_res_txt += "‚åõÔ∏è"

    # –£—Å–ª–æ–≤–∏–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–º–µ–Ω–∞ —Å—Ç–æ—Ä–æ–Ω
    if penalty.keeper == penalty.target:
        keeper_txt = keeper_res_txt + "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n" + \
            owner_res_txt + "\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n" + target_res_txt
        kicker_txt = kicker_res_txt + "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n" + \
            target_res_txt + "\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n" + owner_res_txt

    else:
        keeper_txt = keeper_res_txt + "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n" + \
            target_res_txt + "\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n" + owner_res_txt
        kicker_txt = kicker_res_txt + "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n" + \
            owner_res_txt + "\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n" + target_res_txt

    return keeper_txt, kicker_txt


async def format_penalty_final_result_text(penalty: Penalty):
    owner_res_txt = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ {penalty.owner_username}\n"
    target_res_txt = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ {penalty.target_username}\n"

    owner_res_txt += penalty.owner_txt.replace("0", "‚ùå").replace("1", "‚öΩÔ∏è")
    target_res_txt += penalty.target_txt.replace("0", "‚ùå").replace("1", "‚öΩÔ∏è")

    if penalty.owner_card_id == 0:
        if penalty.owner == penalty.winner:
            winner_txt = f"\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å - {penalty.owner_username}"
        elif penalty.target == penalty.winner:
            winner_txt = f"\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å - {penalty.target_username}"
        else:
            winner_txt = "\nüèÜ –í—ã –∑–∞–±–∏–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤! –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫—É –∏–ª–∏ –∂–µ –Ω–∏—á—å—é, –≤—ã–±–æ—Ä –∑–∞ –≤–∞–º–∏!"
    else:
        if penalty.owner == penalty.winner:
            winner_txt = f"\n{penalty.owner_username} –ø–æ–±–µ–¥–∏–ª –∏ –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞"
        elif penalty.target == penalty.winner:
            winner_txt = f"\n{penalty.target_username} –ø–æ–±–µ–¥–∏–ª –∏ –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞"
        else:
            winner_txt = "\nüèÜ –í—ã –∑–∞–±–∏–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤! –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫—É –∏–ª–∏ –∂–µ –Ω–∏—á—å—é, –≤—ã–±–æ—Ä –∑–∞ –≤–∞–º–∏!"

    return target_res_txt + "\n" + owner_res_txt + winner_txt


async def format_user_info_text(user: Player):
    last_date = datetime.datetime.fromtimestamp(user.last_open - 86400)
    date_str = last_date.strftime("%d.%m.%Y %H:%M")
    txt = f"""
    –î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} (ID {user.id})

    –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - {user.joined_at_txt}
    –°–æ–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ - {user.card_quants}
    –†–µ–π—Ç–∏–Ω–≥ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ - {user.rating}
    –†–µ–π—Ç–∏–Ω–≥ –≤ –∏–≥—Ä–µ –ø–µ–Ω–∞–ª—å—Ç–∏ - {user.season_penalty}

    –ó–∞–±–∏—Ä–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É - {date_str}
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - {user.transactions}
    """
    return dedent(txt)


async def format_view_my_packs_text(upacks: UserPacks):
    txt = f"""
    üóÉ –¢–≤–æ–∏ –ø–∞–∫–∏:

    üÉè –ü–∞–∫ –Ω–∞ 5 –∫–∞—Ä—Ç: <b>{upacks.five_pack}</b>
    üÉè –ü–∞–∫ –Ω–∞ 10 –∫–∞—Ä—Ç: <b>{upacks.ten_pack}</b>
    üÉè –ü–∞–∫ –Ω–∞ 20 –∫–∞—Ä—Ç: <b>{upacks.twenty_pack}</b>
    üÉè –ü–∞–∫ –Ω–∞ 30 –∫–∞—Ä—Ç: <b>{upacks.thirty_pack}</b>
    üÉè –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞: <b>{upacks.player_pick}</b>
    """
    return dedent(txt)


async def format_owner_trade_cards_text(cards):
    txt = "–í—ã–±—Ä–∞–Ω—ã –∫–∞—Ä—Ç—ã:\n"
    card: UserCard
    for card in cards:
        txt += f"\n‚Ä¢ {card.card.name} <b>{card.card.card_name}</b> | –†–µ–π—Ç–∏–Ω–≥: <b>{card.points}</b>"

    txt += "\n\n–ù–∞–ø–∏—à–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username), —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å—Å—è"

    return txt


async def format_multi_trade_offer_text(username, cards, quant):
    txt = f"{username} –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±–º–µ–Ω {quant} –Ω–∞ {quant} —ç—Ç–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏:\n"
    card: UserCard
    for card in cards:
        txt += f"\n‚Ä¢ {card.card.name} <b>{card.card.card_name}</b> | –†–µ–π—Ç–∏–Ω–≥: <b>{card.points}</b>"

    return txt


async def format_target_trade_cards_text(res):
    txt = "–í—ã –æ—Ç–¥–∞–µ—Ç–µ –∫–∞—Ä—Ç—ã:\n"
    for card in res[1]:
        txt += f"\n‚Ä¢ {card.card.name} <b>{card.card.card_name}</b> | –†–µ–π—Ç–∏–Ω–≥: <b>{card.points}</b>"

    txt += "\n\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∫–∞—Ä—Ç—ã:"
    for card in res[0]:
        txt += f"\n‚Ä¢ {card.card.name} <b>{card.card.card_name}</b> | –†–µ–π—Ç–∏–Ω–≥: <b>{card.points}</b>"

    txt += "\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å —ç—Ç–∏ –∫–∞—Ä—Ç—ã?"

    return txt


async def format_m_trade_answer_text(trade: Trade, owner_cards, target_cards):
    txt = f"{trade.target_username} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –≤—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞.\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç—ã:\n"
    for card in target_cards:
        txt += f"\n‚Ä¢ {card.card.name} <b>{card.card.card_name}</b> | –†–µ–π—Ç–∏–Ω–≥: <b>{card.points}</b>"

    txt += "\n\n–í—ã –æ—Ç–¥–∞–¥–∏—Ç–µ –∫–∞—Ä—Ç—ã:"
    for card in owner_cards:
        txt += f"\n‚Ä¢ {card.card.name} <b>{card.card.card_name}</b> | –†–µ–π—Ç–∏–Ω–≥: <b>{card.points}</b>"

    return txt
