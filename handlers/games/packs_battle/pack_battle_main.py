import asyncio
import logging
from textwrap import dedent

from aiogram import F, Router
from aiogram.types import CallbackQuery as CQ

from db.models import PackBattle
from db.queries.pack_battle_qs import (battle_user_ready,
                                       get_active_pack_battle_lobbies,
                                       update_owner_battle_msg_id,
                                       update_target_battle_msg_id)
from keyboards.packs_kb import (opp_battle_kb, pack_battle_kb,
                                pack_battle_lobbies_kb)
from middlewares.actions import ActionMiddleware
from utils.duel_misc import (check_battle_timer, resent_battle_lobby_info,
                             send_battle_finish_messages)

flags = {"throttling_key": "default"}
router = Router()
router.callback_query.middleware(ActionMiddleware())


@router.callback_query(F.data == "packbattle", flags=flags)
async def pack_battle_cmd(c: CQ, action_queue):
    txt = """
    ‚öñÔ∏è –í –±–∏—Ç–≤–µ –ø–∞–∫–æ–≤ —Ç—ã —Å—Ç–∞–≤–∏—à—å —Å–≤–æ–∏ –ø–∞–∫–∏ –Ω–∞ –∫–æ–Ω –ø—Ä–æ—Ç–∏–≤ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.

    –ó–∞ –ø–æ–±–µ–¥—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –¥–æ—Å—Ç–∞–ª –∏–∑ –ø–∞–∫–∞.
    –ó–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ - —Ç–µ—Ä—è–µ—à—å —Å–≤–æ–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –¥–æ—Å—Ç–∞–ª –∏–∑ –ø–∞–∫–∞.

    –¢—ã –º–æ–∂–µ—à—å –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –ª–æ–±–±–∏, –ª–∏–±–æ –≤–æ–π—Ç–∏ –≤ –ª–æ–±–±–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    """
    await c.message.edit_text(dedent(txt), reply_markup=pack_battle_kb)

    try:
        del action_queue[str(c.from_user.id)]
    except Exception as error:
        logging.info(f"Action delete error\n{error}")


@router.callback_query(F.data == "packbattlelobbies", flags=flags)
async def pack_battle_rooms_cmd(c: CQ, ssn, action_queue):
    battles = await get_active_pack_battle_lobbies(ssn)
    if len(battles) > 0:
        txt = "üé™ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏:"
        await c.message.edit_text(
            txt, reply_markup=pack_battle_lobbies_kb(battles))
    else:
        await c.answer(
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏", show_alert=True)
    try:
        del action_queue[str(c.from_user.id)]
    except Exception as error:
        logging.info(f"Action delete error\n{error}")


@router.callback_query(F.data.startswith("rdypbttl_"), flags=flags)
async def pack_battle_ready_cmd(c: CQ, action_queue, ssn, bot, db):
    battle_id = int(c.data.split("_")[-1])
    res = await battle_user_ready(ssn, c.from_user.id, battle_id)
    if res == "not_available":
        txt = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        await c.message.edit_text(txt, reply_markup=pack_battle_kb)
    elif res == "already_ready":
        await c.answer("–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å!")
    else:
        if res[1] == "not_ready":
            battle: PackBattle = res[0]
            txt = f"""
            üé™ –í–∞—à–µ –ª–æ–±–±–∏:

            –ü–∞–∫ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥—É—ç–ª—å: {"–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–∞–∫" if battle.quant == 0 else f"{battle.quant} –∫–∞—Ä—Ç"}
            üü£ {battle.owner_username}
            üü† {battle.target_username}
            """
            if res[0].owner == c.from_user.id:
                await c.message.edit_reply_markup(
                    reply_markup=opp_battle_kb(battle_id, "owner", 1))
                msg_id = await resent_battle_lobby_info(
                    bot, battle, "target", dedent(txt),
                    opp_battle_kb(battle_id, "target", 1))
                await update_target_battle_msg_id(ssn, battle_id, msg_id)
            else:
                await c.message.edit_reply_markup(
                    reply_markup=opp_battle_kb(battle_id, "target", 1))
                msg_id = await resent_battle_lobby_info(
                    bot, res[0], "owner", dedent(txt),
                    opp_battle_kb(battle_id, "owner", 1))
                await update_owner_battle_msg_id(ssn, battle_id, msg_id)
                asyncio.create_task(check_battle_timer(
                    db, bot, battle_id, "owner", res[0].owner, res[0].owner_ts, 60))
        else:
            await send_battle_finish_messages(res[0], bot, res[2], res[3])

    try:
        del action_queue[str(c.from_user.id)]
    except Exception as error:
        logging.info(f"Action delete error\n{error}")
