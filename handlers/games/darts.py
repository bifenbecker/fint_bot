import asyncio
import logging
from textwrap import dedent

from aiogram import F, Router
from aiogram.fsm.context import FSMContext as FSM
from aiogram.types import CallbackQuery as CQ

from db.models import CardItem, Games
from db.queries.games_queries import hit_darts
from keyboards.games_kbs import darts_kb, no_free_darts_kb
from keyboards.pay_kbs import cards_pack_btn, player_pick_kb
from middlewares.actions import ActionMiddleware
from utils.format_texts import format_view_my_cards_text
from utils.misc import format_delay_text
from utils.states import UserStates

flags = {"throttling_key": "default"}
router = Router()
router.callback_query.middleware(ActionMiddleware())


@router.callback_query(F.data == "darts", flags=flags)
async def darts_cmd(c: CQ, action_queue):
    try:
        del action_queue[str(c.from_user.id)]
    except Exception as error:
        logging.info(f"Action delete error\n{error}")

    txt = """
    –ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –º–µ—Ç–∫–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑? 
    –†–∞–∑ –≤ 4 –¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∑–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–ª–∞—Ç—É —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    –ü—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –≤ —Ü–µ–Ω—Ç—Ä - –≤—ã–¥–∞–µ—Ç—Å—è 3 –∫–∞—Ä—Ç—ã
    –¶–µ–Ω–∞ 3 –ø–æ–ø—ã—Ç–æ–∫ 150 —Ä—É–±
    """
    await c.message.edit_text(dedent(txt), reply_markup=darts_kb)


@router.callback_query(F.data == "hitdarts", flags=flags)
async def hit_darts_cmd(c: CQ, ssn, action_queue, bot, state: FSM):
    res = await hit_darts(ssn, c.from_user.id, bot)
    if isinstance(res, int):
        time = await format_delay_text(res)
        txt = f"""
        –¢—ã –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–±–æ–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —É–¥–∞—á—É!
        –ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {time} ‚è± –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±—Ä–æ—Å–∫–∏!

        –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∏—Ç—å, —Ç–æ –æ–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - @fintsupport
        """
        await c.message.edit_text(dedent(txt), reply_markup=no_free_darts_kb)
    else:
        try:
            await c.message.delete()
        except Exception as error:
            logging.error(f"Del error | chat {c.from_user.id}\n{error}")

        await asyncio.sleep(4)
        if res[0] == "win":
            pack_id = res[1]
            txt = "üéØ –í —è–±–ª–æ—á–∫–æ!. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã"
            await c.message.answer(txt, reply_markup=cards_pack_btn(pack_id))

        else:
            txt = "–í —ç—Ç–æ—Ç —Ä–∞–∑ ‚òòÔ∏è —É–¥–∞—á–∞ –Ω–µ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø—ã—Ç–∞—Ç—å –µ–µ –µ—â–µ —Ä–∞–∑"
            game: Games = res[1]
            if (game.free_quant < 1) and (game.attempts < 1):
                await c.message.answer(txt, reply_markup=no_free_darts_kb)
            else:
                await c.message.answer(txt, reply_markup=darts_kb)

    try:
        del action_queue[str(c.from_user.id)]
    except Exception as error:
        logging.info(f"Action delete error\n{error}")


@router.callback_query(F.data == "buydarts", flags=flags)
async def buy_darts_menu(c: CQ, action_queue):
    try:
        del action_queue[str(c.from_user.id)]
    except Exception as error:
        logging.info(f"Action delete error\n{error}")

    await c.message.edit_reply_markup(reply_markup=no_free_darts_kb)
